services:
  rabbit:
    image: rabbitmq:3.13.2-management
    hostname: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 5s
    extends:
      file: common-config.yml
      service: network-deploy-service

  keycloak:
    image: quay.io/keycloak/keycloak:24.0.4
    container_name: keycloak
    ports:
      - "7080:8080"
    environment:
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KC_HEALTH_ENABLED: "true"
      KC_METRICS_ENABLED: "true"
      KEYCLOAK_IMPORT: "/tmp/realm-config.json"
    volumes:
      - ../../configurations/keycloack/master-microservices-realm-dev.json:/tmp/realm-config.json
    command: "start-dev --import-realm"
    healthcheck:
      test: ["CMD-SHELL", "exec 3<>/dev/tcp/localhost/8080 && echo -e 'GET /health/ready HTTP/1.1\\r\\nHost: localhost\\r\\nConnection: close\\r\\n\\r\\n' >&3 && cat <&3 | grep -q '200 OK'"]
      interval: 10s
      timeout: 10s
      retries: 5
    extends:
      file: common-config.yml
      service: network-deploy-service

  minio:
    image: minio/minio
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /data/loki-data && \
        mkdir -p /data/loki-ruler && \
        minio server /data
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_PROMETHEUS_AUTH_TYPE: public
      MINIO_UPDATE: off
    ports:
      - 9000
    volumes:
      - ./.data/minio:/data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 15s
      timeout: 20s
      retries: 5
    extends:
      file: common-config.yml
      service: network-deploy-service

  read:
    image: grafana/loki:3.0.0
    command: "-config.file=/etc/loki/config.yaml -target=read"
    ports:
      - 3101:3100
      - 7946
      - 9095
    volumes:
      - ../../observability/grafana-loki-warehouse/loki-config.yaml:/etc/loki/config.yaml
    depends_on:
      - minio
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: &loki-dns
      kathesamanet:
        aliases:
          - loki

  write:
    image: grafana/loki:3.0.0
    command: "-config.file=/etc/loki/config.yaml -target=write"
    ports:
      - 3102:3100
      - 7946
      - 9095
    volumes:
      - ../../observability/grafana-loki-warehouse/loki-config.yaml:/etc/loki/config.yaml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      - minio
    networks:
      <<: *loki-dns

  gateway:
    image: nginx:latest
    depends_on:
      - read
      - write
    entrypoint:
      - sh
      - -euc
      - |
        cat <<EOF > /etc/nginx/nginx.conf
        user  nginx;
        worker_processes  5;  ## Default: 1

        events {
          worker_connections   1000;
        }

        http {
          resolver 127.0.0.11;

          server {
            listen             3100;

            location = / {
              return 200 'OK';
              auth_basic off;
            }

            location = /api/prom/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /api/prom/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /api/prom/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }

            location = /loki/api/v1/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /loki/api/v1/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /loki/api/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }
          }
        }
        EOF
        /docker-entrypoint.sh nginx -g "daemon off;"
    ports:
      - "3100:3100"
    healthcheck:
      test: [ "CMD", "service", "nginx", "status" ]
      interval: 10s
      timeout: 5s
      retries: 5
    extends:
      file: common-config.yml
      service: network-deploy-service

  grafana:
    image: grafana/grafana:latest
    environment:
      GF_PATHS_PROVISIONING: /etc/grafana/provisioning
      GF_AUTH_ANONYMOUS_ENABLED: ${GF_AUTH_ANONYMOUS_ENABLED}
      GF_AUTH_ANONYMOUS_ORG_ROLE: ${GF_AUTH_ANONYMOUS_ORG_ROLE}
    depends_on:
      - gateway
    entrypoint:
      - sh
      - -euc
      - |
        /run.sh
    ports:
      - "3000:3000"
    volumes:
      - ../../observability/grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    extends:
      file: common-config.yml
      service: network-deploy-service

  alloy:
    image: grafana/alloy:v1.0.0
    volumes:
      - ../../observability/alloy-colector/alloy-local-config.yml:/etc/alloy/config.alloy:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: run --server.http.listen-addr=0.0.0.0:12345 --storage.path=/var/lib/alloy/data /etc/alloy/config.alloy
    ports:
      - 12345:12345
    depends_on:
      - gateway
    extends:
      file: common-config.yml
      service: network-deploy-service

  accountsdb:
    container_name: accountsdb
    ports:
      - 3306:3306
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE_ACCOUNTS}
    extends:
      file: common-config.yml
      service: microservice-db-config

  loansdb:
    container_name: loansdb
    ports:
      - 3307:3306
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE_LOANS}
    extends:
      file: common-config.yml
      service: microservice-db-config

  cardsdb:
    container_name: cardsdb
    ports:
      - 3308:3306
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE_CARDS}
    extends:
      file: common-config.yml
      service: microservice-db-config

  redis:
    image: redis
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli ping | grep PONG" ]
      timeout: 10s
      retries: 10
    extends:
      file: common-config.yml
      service: network-deploy-service

  configserver:
    image: "kathesama/configuration-server:v4"
    container_name: configserver-ms
    ports:
      - "8888:8888"
      - "7889:5005"
    healthcheck:
      test: "curl --fail --silent localhost:8888/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    networks:
      - kathesamanet
    extends:
      file: common-config.yml
      service: microservice-base-config

  eurekaserver:
    image: "kathesama/eureka-server:v4"
    container_name: eurekaserver-ms
    ports:
      - "8761:8761"
    depends_on:
      configserver:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent localhost:8761/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    networks:
      - kathesamanet
    extends:
      file: common-config.yml
      service: microservice-config-server-config

  gatewayserver:
    image: "kathesama/gateway-server:v4"
    container_name: gatewayserver-ms
    ports:
      - "8072:8072"
      - "5005:5005"
    depends_on:
      eurekaserver:
        condition: service_healthy
      redis:
        condition: service_healthy
      keycloak:
        condition: service_healthy
      rabbit:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent localhost:8072/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    networks:
      - kathesamanet
    environment:
      SPRING_DATA_REDIS_CONNECT-TIMEOUT: ${SPRING_DATA_REDIS_CONNECT_TIMEOUT}
      SPRING_DATA_REDIS_HOST: ${SPRING_DATA_REDIS_HOST}
      SPRING_DATA_REDIS_PORT: ${SPRING_DATA_REDIS_PORT}
      SPRING_DATA_REDIS_TIMEOUT: ${SPRING_DATA_REDIS_TIMEOUT}
      KC_REALM_PORT: ${KC_REALM_PORT}
      KC_REALM_DEFAULT: ${KC_REALM_DEFAULT}
      KC_REALM_SERVER: ${KC_REALM_SERVER}
    extends:
      file: common-config.yml
      service: microservice-eureka-config

  message:
    image: "kathesama/message-server:v4"
    container_name: message-ms
    depends_on:
      eurekaserver:
        condition: service_healthy
      rabbit:
        condition: service_healthy
    environment:
      RBMQ_SERVICE_HOST: ${RBMQ_SERVICE_HOST_ENV}
      RBMQ_SERVICE_PORT: ${RBMQ_SERVICE_PORT_ENV}
      RBMQ_SERVICE_USERNAME: ${RBMQ_SERVICE_USERNAME_ENV}
      RBMQ_SERVICE_PASSWORD: ${RBMQ_SERVICE_PASSWORD_ENV}
      RBMQ_SERVICE_CONNECTION_TIMEOUT: ${RBMQ_SERVICE_CONNECTION_TIMEOUT_ENV}
    extends:
      file: common-config.yml
      service: microservice-eureka-config

  accounts:
    image: "kathesama/account-service:v4"
    container_name: accounts-ms
    ports:
#      - "8000:8000"
      - "7000:5005"
    depends_on:
      accountsdb:
        condition: service_healthy
      gatewayserver:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 700m
    networks:
      - kathesamanet
    environment:
      SPRING_DATASOURCE_URL: ${SPRING_DATASOURCE_URL_ACCOUNT}
      RBMQ_SERVICE_HOST: ${RBMQ_SERVICE_HOST_ENV}
      RBMQ_SERVICE_PORT: ${RBMQ_SERVICE_PORT_ENV}
      RBMQ_SERVICE_USERNAME: ${RBMQ_SERVICE_USERNAME_ENV}
      RBMQ_SERVICE_PASSWORD: ${RBMQ_SERVICE_PASSWORD_ENV}
      RBMQ_SERVICE_CONNECTION_TIMEOUT: ${RBMQ_SERVICE_CONNECTION_TIMEOUT_ENV}
    extends:
      file: common-config.yml
      service: microservice-eureka-config

  cards:
    image: "kathesama/card-service:v4"
    container_name: cards-ms
    ports:
#      - "8001:8001"
      - "7001:5005"
    depends_on:
      cardsdb:
        condition: service_healthy
      gatewayserver:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 700m
    networks:
      - kathesamanet
    environment:
      SPRING_DATASOURCE_URL: ${SPRING_DATASOURCE_URL_CARD}
    extends:
      file: common-config.yml
      service: microservice-eureka-config

  loans:
    image: "kathesama/loan-service:v4"
    container_name: loans-ms
    ports:
#      - "8002:8002"
      - "7002:5005"
    depends_on:
      loansdb:
        condition: service_healthy
      gatewayserver:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 700m
    networks:
      - kathesamanet
    environment:
      SPRING_DATASOURCE_URL: ${SPRING_DATASOURCE_URL_LOAN}
    extends:
      file: common-config.yml
      service: microservice-eureka-config

  prometheus:
    image: prom/prometheus:v2.50.1
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ../../observability/grafana-prometheus-monitor/prometheus-config.yml:/etc/prometheus/prometheus.yml
    extends:
      file: common-config.yml
      service: network-deploy-service

networks:
  kathesamanet:
    driver: "bridge"